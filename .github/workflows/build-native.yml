name: build-native

on:
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
        arch:
          - x64
          - x86
        include:
          - os: macos-latest
    name: build native on ${{ matrix.os }} ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup mingw-w64-x86_64-gcc
        if: startsWith(matrix.os, 'windows') && matrix.arch == 'x64'
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: true
          install: |
            autoconf
            automake
            mingw-w64-x86_64-gcc
            libtool
            texinfo
          location: D:\
      - name: Setup mingw-w64-i686-gcc
        if: startsWith(matrix.os, 'windows') && matrix.arch == 'x86'
        uses: msys2/setup-msys2@v2
        with:
          msystem: mingw32
          update: true
          install: |
            autoconf
            automake
            mingw-w64-i686-gcc
            libtool
            texinfo
          location: D:\
      - name: export msys to PATH
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          cp -f /etc/nsswitch.conf /D/msys64/etc/nsswitch.conf
          cat <<EOF >>"$GITHUB_PATH"
          D:\msys64\bin
          D:\msys64\usr\bin
          D:\msys64\mingw64\bin
          D:\msys64\mingw32\bin
          EOF
      - name: setup sdk root on macos
        if: startsWith(matrix.os, 'macos')
        run: |
          sudo xcode-select -s /Library/Developer/CommandLineTools
          SDKROOT="$(cd /Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk && pwd -P)"
          echo "SDKROOT=$SDKROOT" >>"$GITHUB_ENV"
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: liberica
          java-version: 8
          architecture: ${{ matrix.arch || 'x64' }}
      - uses: actions/cache@v2
        env:
          cache-name: maven-dependencies
        with:
          path: ~/.m2/repository
          key: ${{ env.cache-name }}-${{ runner.os }}-1-${{ github.workflow }}-${{ hashFiles('.github/**', '**/pom.xml') }}
          restore-keys: |
            ${{ env.cache-name }}-${{ runner.os }}-1-${{ github.workflow }}-
            ${{ env.cache-name }}-${{ runner.os }}-1-
            ${{ env.cache-name }}-${{ runner.os }}-
      - env:
          ARCH: ${{ matrix.arch }}
          BUILD_NATIVE: true
        shell: bash
        run: .github/functions.sh init_env dependency
      - env:
          ARCH: ${{ matrix.arch }}
          BUILD_NATIVE: true
        shell: bash
        run: .github/functions.sh init_env mvnw --color=always install
      - name: upload native library
        shell: bash
        env:
          ARCH: ${{ matrix.arch }}
          GITHUB_TOKEN: ${{ github.token }}
        run: .github/functions.sh git_config commit_native push
      - name: Before Cache
        shell: bash
        run: |
          ./mvnw -B --color=always build-helper:remove-project-artifact || :
          find ~/.m2/repository -type d -name '*-SNAPSHOT' \( -exec rm -rf '{}' \; -prune \)

  vagrant:
    name: build native on ${{ matrix.image }}
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      matrix:
        image:
          - freebsd-12.2
          - freebsd-12.2-i386
          - openbsd-6.9
          - mcandre-openbsd-i386
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        env:
          cache-name: maven-dependencies
        with:
          path: ~/.m2/repository
          key: ${{ env.cache-name }}-${{ runner.os }}-1-${{ github.workflow }}-${{ hashFiles('.github/**', '**/pom.xml') }}
          restore-keys: |
            ${{ env.cache-name }}-${{ runner.os }}-1-${{ github.workflow }}-
            ${{ env.cache-name }}-${{ runner.os }}-1-
            ${{ env.cache-name }}-${{ runner.os }}-
      - name: Run with vagrant
        run: |
          vagrant plugin install vagrant-rsync-back
          machine='${{ matrix.image }}'
          SKIP_SYNC_FOLDER=1 vagrant up "$machine"
          vagrant reload "$machine"
          vagrant ssh "$machine" -- '/bin/sh -e' <<-EOF
            cd /vagrant
            BUILD_NATIVE=true UPLOAD_ARTIFACT=true .github/functions.sh init_env dependency mvnw --color=always install
            GITHUB_ACTOR='$GITHUB_ACTOR' GITHUB_TOKEN='${{ github.token }}' .github/functions.sh git_config commit_native push
          EOF
          vagrant rsync-back "$machine"
          vagrant halt "$machine"
      - name: Before Cache
        shell: bash
        run: |
          ./mvnw -B --color=always build-helper:remove-project-artifact || :
          find ~/.m2/repository -type d -name '*-SNAPSHOT' \( -exec rm -rf '{}' \; -prune \)
